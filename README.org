#+title: Sway configuration
This is The Sway
https://swaywm.org/

Dependancies:
- sensors (system monitoring)
- sway
- waybar
- swaybg
- rofi-lbonn-wayland
- grim
- swayshot
- swappy
- wl-clipboard

tangle this file with
~org-babel-tangle~

Read ~man 5 sway~ for a complete reference.
* Main config file
:PROPERTIES:
:header-args: :tangle config
:END:
** dunst setup
#+begin_src bash
exec killall -q notify-osd
exec --no-startup-id dunst -config ~/.config/sway/dunstrc
#+end_src
** Variables
*** Font
#+begin_src bash
font pango:FiraCode Nerd Font Mono 12
#+end_src
*** Set Super Key as modifier
#+begin_src bash
set $mod Mod4
#+end_src
*** Set Home row direction keys, like vim
#+begin_src bash
set $left h
set $down j
set $up k
set $right l
#+end_src
*** keyboard input
#+begin_src bash
input "keyboard" {
    xkb_options compose:menu
}
#+end_src
** Wallpaper
#+begin_src bash
output "*" bg ~/.config/sway/wallpaper.jpg fill
#+end_src

** Idle configuration
Example configuration:

#+begin_src bash
#exec swayidle -w \
    #timeout 300 'swaylock -f -c 000000' \
    #timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
    #before-sleep 'swaylock -f -c 000000'
#+end_src

This will lock your screen after 300 seconds of inactivity, then turn off
your displays after another 300 seconds, and turn your screens back on when
resumed. It will also lock your screen before your computer goes to sleep.

** Input configuration
Example configuration:

#+begin_src bash
#input "2:14:SynPS/2_Synaptics_TouchPad" {
#dwt enabled
#tap enabled
#natural_scroll enabled
#middle_emulation enabled
#}
#+end_src

You can get the names of your inputs by running: ~swaymsg -t get_inputs~
Read ~man 5 sway-input~ for more information about this section.

** Key bindings
*** Start application
#+begin_src bash
bindsym $mod+p exec rofi -config ~/.config/sway/rofi.css -show combi
# terminal
bindsym $mod+Return exec alacritty
# browser
bindsym $mod+Shift+w exec firefox
# screenshots
bindsym $mod+Shift+s exec grim -g "$(slurp)" - | wl-copy

#+end_src
*** Basics:
#+begin_src bash
# Kill focused window
bindsym $mod+q kill
#+end_src
Drag floating windows by holding down $mod and left mouse button.
Resize them with right mouse button + $mod.
Despite the name, also works for non-floating windows.
Change normal to inverse to use left mouse button for resizing and right
#+begin_src bash
# mouse button for dragging.
floating_modifier $mod normal

# Reload the configuration file
bindsym $mod+Shift+c reload

# Exit sway (logs you out of your Wayland session)
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#+end_src
*** Moving around:
Start a terminal
Move your focus around
#+begin_src bash
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right
# Or use $mod+[up|down|left|right]
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move the focused window with the same, but add Shift
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right
# Ditto, with arrow keys
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src
*** Workspaces:
**** Rename workspaces
#+begin_src bash
set $ws1 '1: Terminal  '
set $ws2 '2: Firefox  '
set $ws3 '3: Spotify  '
set $ws4 '4: Games  '
set $ws5 '5: General  '
set $ws6 '6: General  '
set $ws7 '7: General  '
set $ws8 '8: Gimp  '
set $ws9 '9: Commander  '
set $ws10 '10: Comms  '
#+end_src
**** Assign applications to proper workspace
#+begin_src conf
                        for_window [class="firefox"] move to workspace $ws2
                        #TODO
                        #firefox don't open in ws2
                        for_window [class="Spotify"] move to workspace $ws3
                        for_window [class="Steam"] move to workspace $ws4
                        for_window [class="steam"] move to workspace $ws4
                        for_window [class="Gimp"] move to workspace $ws8
                        for_window [class="Signal"] move to workspace $ws10
                        for_window [class="discord"] move to workspace $ws10
#+end_src
**** Switch to workspace
#+begin_src bash
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
#+end_src
**** Move focused container to workspace
#+begin_src bash
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
#+end_src

*** Layout stuff:
You can "split" the current object of your focus with
$mod+b or $mod+v, for horizontal and vertical splits
respectively.
#+begin_src bash
bindsym $mod+s splitv; exec notify-send "sway" "Changed split mode: Horizontal"
bindsym $mod+v splith; exec notify-send "sway" "Changed split mode: Vertical"

# Switch the current container between different layout styles
#bindsym $mod+s layout stacking
#bindsym $mod+w layout tabbed
#bindsym $mod+e layout toggle split

# Make the current focus fullscreen
bindsym $mod+f fullscreen

# TODO
# Toggle the current focus between tiling and floating mode
bindsym $mod+m floating toggle
# TODO
# Swap focus between the tiling area and the floating area
bindsym $mod+Shift+m focus mode_toggle

# Move focus to the parent container
bindsym $mod+a focus parent
#+end_src
*** Scratchpad:
Sway has a "scratchpad", which is a bag of holding for windows.
You can send windows there and get them back later.
#+begin_src bash
#TODO figure out how to use it
# Move the currently focused window to the scratchpad
#bindsym $mod+Shift+minus move scratchpad
# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
#bindsym $mod+minus scratchpad show
#+end_src
*** Resizing containers:
left will shrink the containers width
right will grow the containers width
up will shrink the containers height
down will grow the containers height
#+begin_src bash
#
mode "resize" {
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
#+end_src
*** Volume
#+begin_src bash
set $refresh_i3status killall -SIGUSR1 i3status

bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

bindsym $mod+period exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% && $refresh_i3status; exec notify-send "VOL+5" "Volume=$(pamixer --get-volume)%"
bindsym $mod+comma exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% && $refresh_i3status; exec notify-send "VOL-5" "Volume=$(pamixer --get-volume)%"
#+end_src

#+RESULTS:

*** Use Mouse+$mod to drag floating windows to their wanted position
#+begin_src bash
floating_modifier $mod
#+end_src
** Colors
#+begin_src bash
client.focused           	#82AAFF #1E2030 #FFC777 #7aa2f7  #7aa2f7
client.focused_inactive  	#82AAFF #1E2030 #82AAFF #565f89  #565f89
client.unfocused         	#565f89 #1E2030 #82AAFF #565f89  #565f89
client.urgent            	#2f343a #FFC777 #1E2030 #FFC777  #FFC777
client.placeholder       	#000000 #0c0c0c #1E2030 #565f89  #565f89
#+end_src
** Window options
#+begin_src bash
for_window [class="^.*"] border pixel 3
hide_edge_borders smart
smart_gaps on
gaps outer 15px
gaps inner 15px
#+end_src

** Status Bar:
Read ~man 5 sway-bar~ for more information about this section.
#+begin_src bash
bar     {
    position top
    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.


    status_command while date +"VOL:$(pamixer --get-volume)% | CPU_T:$(sensors | grep 'Tctl' | awk '{gsub(/\+/,"",$2); print $2}') | GPU_T:$(sensors | grep 'junction' | awk '{print $2}' | cut -d'+' -f2) | RAM:$(free -m | awk '/^Mem:/ {print $3} ') | %Y-%m-%d | %H:%M "; do sleep 5; done


    colors {
		background #1E2030
		statusline #82AAFF
		separator #565f89
		focused_workspace #82AAFF #1E2030 #FFC777
		active_workspace #333333 #333333 #888888
		inactive_workspace #565f89 #1E2030 #82AAFF
		urgent_workspace #FFC777 #1E2030 #FFC777
    }
}
#+end_src

* Rofi CSS file
:PROPERTIES:
:header-args: :tangle rofi.css
:END:
** Configuration and colors
#+begin_src css
configuration {
    display-drun: "applications:";
    display-window: "windows:";
    drun-display-format: "{name}";
    font: "FiraCode Nerd Font Mono 15";
    modi: "window,run,drun";
}

@theme "/dev/null"

,*{
    bg: #1E2030;
    bg-alt: #1E2030;
    bg-selected: #82AAFF;
    fg: #FFC777;
    fg-alt: #82AAFF;
    border-colour: #FFC777;
    silver: #565f89;


    border: 0;
    margin: 0;
    padding: 0;
    spacing: 0;
}

window {
    width: 100%;
    background-color: @bg;
    location:north;
    children:                    [ horibox ];
}
#+end_src
** Horizontal Box
#+begin_src css
horibox {
    spacing:                     0px;
    background-color: @bg-alt;
    border-color: @fg-alt;
    border: 0px 0px 0px 0px solid;
    orientation:                 horizontal;
    children:                    ["entry", "listview" ];
}

#+end_src
** Listview
#+begin_src css
listview {
    enabled:                     true;
    columns:                     1;
    lines:                       100;
    cycle:                       true;
    dynamic:                     true;
    scrollbar:                   false;
    layout:                      horizontal;
    reverse:                     false;
    fixed-height:                true;
    fixed-columns:               true;

    spacing:                     10px;
    margin:                      0px;
    padding:                     0px;
    border:                      0px solid;
    border-radius:               0px;
    border-color:                @border-colour;
    background-color:            transparent;
    text-color:                  @foreground-colour;
    cursor:                      "default";
}

entry {
    background-color: @bg;
    enabled:                     true;
    padding:                     2px 5px;
    expand:                      false;
    width:                       8em;
    cursor:                      text;
    placeholder:                 "search...";
    placeholder-color:           @fg;
    text-color: @fg;
}
element {
    padding: 2px 10px;
    background-color: transparent;
    text-color: @silver;
}

element selected {
    text-color: @fg-alt;
    background-color: @bg;
    border: 1px 1px solid;
    border-color: @silver;
}

element-text {
    background-color: transparent;
    text-color: inherit;
    vertical-align: 0.5;
}

element-icon {
    size: 14;
    padding: 0 10 0 0;
    background-color: transparent;
}

#+end_src

* Dunst config file
:PROPERTIES:
:header-args: :tangle dunstrc
:END:
See dunst(5) for all configuration options
#+begin_src conf

[global]
    ### Display ###

    # Which monitor should the notifications be displayed on.
    monitor = 0
    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a window manager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern window managers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = none
    ### Geometry ###
    # dynamic width from 0 to 300
    # width = (0, 300)
    # constant width of 300
    width = 300
    # The maximum height of a single notification, excluding the frame.
    height = 300
    # Position the notification in the top right corner
    origin = top-right
    # Offset from the origin
    offset = 10x10
    # Scale factor. It is auto-detected if value is 0.
    scale = 0
    # Maximum number of notification (0 means no limit)
    notification_limit = 20
    ### Progress bar ###
    # Turn on the progess bar. It appears when a progress hint is passed with
    # for example dunstify -h int:value:12
    progress_bar = true
    # Set the progress bar height. This includes the frame, so make sure
    # it's at least twice as big as the frame width.
    progress_bar_height = 10
    # Set the frame width of the progress bar
    progress_bar_frame_width = 1
    # Set the minimum width for the progress bar
    progress_bar_min_width = 150
    # Set the maximum width for the progress bar
    progress_bar_max_width = 300
    # Corner radius for the progress bar. 0 disables rounded corners.
    progress_bar_corner_radius = 0
    # Corner radius for the icon image.
    icon_corner_radius = 0
    # Show how many messages are currently hidden (because of
    # notification_limit).
    indicate_hidden = yes
    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing window manager is
    # present (e.g. xcompmgr, compiz, etc.). (X11 only)
    transparency = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    # If gap_size is greater than 0, this setting will be ignored.
    separator_height = 2

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 10

    # Padding between text and icon.
    text_icon_padding = 0

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 0
    # Defines color of the frame around the notification window.
    frame_color = "#aaaaaa"
    # Size of gap to display between notifications - requires a compositor.
    # If value is greater than 0, separator_height will be ignored and a border
    # of size frame_width will be drawn around each notification instead.
    # Click events on gaps do not currently propagate to applications below.
    gap_size = 10

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = frame

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # A client can set the 'transient' hint to bypass this. See the rules
    # section for how to disable this if necessary
    # idle_threshold = 120

    ### Text ###
    font = FiraCode Nerd Font Mono 12

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0

    # Possible values are:
    # full: Allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        For a complete reference see
    #        <https://docs.gtk.org/Pango/pango_markup.html>.
    #
    # strip: This setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. Dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *IS GREATLY DISCOURAGED*.
    #
    # no:    Disable markup parsing, incoming notifications will be treated as
    #        plain text. Dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # It's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Vertical alignment of message text and icon.
    # Possible values are "top", "center" and "bottom".
    vertical_alignment = center

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no
    # Stack together notifications with the same content
    stack_duplicates = true
    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false
    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes
    ### Icons ###
    # Recursive icon lookup. You can set a single theme, instead of having to
    # define all lookup paths.
    enable_recursive_icon_lookup = true
    # Set icon theme (only used for recursive icon lookup)
    icon_theme = Adwaita
    # You can also set multiple icon themes, with the leftmost one being used first.
    # icon_theme = "Adwaita, breeze"
    # Align icons left/right/top/off
    icon_position = left
    # Scale small icons up to this size, set to 0 to disable. Helpful
    # for e.g. small files or high-dpi screens. In case of conflict,
    # max_icon_size takes precedence over this.
    min_icon_size = 32
    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 128
    # Paths to default icons (only neccesary when not using recursive icon lookup)
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/
    ### History ###
    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes
    # Maximum amount of notifications kept in history
    history_length = 20
    ### Misc/Advanced ###
    # dmenu path.
    dmenu = /usr/bin/dmenu -p dunst:
    # Browser for opening urls in context menu.
    browser = /usr/bin/xdg-open
    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true
    # Define the title of the windows spawned by dunst
    title = Dunst
    # Define the class of the windows spawned by dunst
    class = Dunst
    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 5
    # Ignore the dbus closeNotification message.
    # Useful to enforce the timeout set by dunst configuration. Without this
    # parameter, an application may close the notification sent before the
    # user defined timeout.
    ignore_dbusclose = false
    ### Wayland ###
    # These settings are Wayland-specific. They have no effect when using X11
    # Uncomment this if you want to let notications appear under fullscreen
    # applications (default: overlay)
    # layer = top
    # Set this to true to use X11 output on Wayland.
    force_xwayland = false
    ### Legacy
    # Use the Xinerama extension instead of RandR for multi-monitor support.
    # This setting is provided for compatibility with older nVidia drivers that
    # do not support RandR and using it on systems that support RandR is highly
    # discouraged.
    # By enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

    ### mouse
    # Defines list of actions for each mouse event
    # Possible values are:
    # * none: Don't do anything.
    # * do_action: Invoke the action determined by the action_name rule. If there is no
    #              such action, open the context menu.
    # * open_url: If the notification has exactly one url, open it. If there are multiple
    #             ones, open the context menu.
    # * close_current: Close current notification.
    # * close_all: Close all notifications.
    # * context: Open context menu for the notification.
    # * context_all: Open context menu for all notifications.
    # These values can be strung together for each mouse event, and
    # will be executed in sequence.
    mouse_left_click = close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#1E2030"
    foreground = "#82AAFF"
    timeout = 3
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon
[urgency_normal]
    background = "#1E2030"
    foreground = "#82AAFF"
    timeout = 1
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#FFC777"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon
#+end_src
